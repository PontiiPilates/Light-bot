<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Models\Event;
use App\Models\Timetable;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;


class EventController extends Controller
{
    /**
     * Display a listing of the resource.
     * –í—ã–≤–æ–¥ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        $events = Event::all()->sortBy('name');;

        return view('admin.pages.events_index', ['events' => $events]);
    }

    /**
     * Show the form for creating a new resource.
     * –í—ã–≤–æ–¥ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Request $r)
    {
        // –µ—Å–ª–∏ get, —Ç–æ –≤—ã–≤–æ–¥ —Ñ–æ—Ä–º—ã
        if ($r->isMethod('GET')) {
            return view('admin.pages.event_form');
        }

        // –µ—Å–ª–∏ post, —Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if ($r->isMethod('POST')) {

            // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            $event = Event::create($r->all());

            // –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if ($r->date && $r->time) {

                foreach ($r->date as $k => $v) {

                    $date = $v;
                    $time = $r->time[$k];
                    $entity_id = $event->id;
                    $type = 'event';

                    // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    $timetable = Timetable::create(['date' => $date, 'time' => $time, 'entity_id' => $entity_id, 'type' => $type]);
                }
            }

            //* Compiled.
            $timetable = DB::table('timetables')
                ->join('events', 'timetables.entity_id', 'events.id')
                ->where('type', 'event')
                ->where('timetables.date', '>=', date('Y-m-d'))
                ->select('timetables.date', 'timetables.time', 'events.name')
                ->orderBy('date')
                ->orderBy('time')
                ->get();



            // –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
            $compilation_string = '–ü–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç';
            $i = 0;

            foreach ($timetable as $item) {

                $months = [
                    '01' => '—è–Ω–≤–∞—Ä—è',
                    '02' => '—Ñ–µ–≤—Ä–∞–ª—è',
                    '03' => '–º–∞—Ä—Ç–∞',
                    '04' => '–∞–ø—Ä–µ–ª—è',
                    '05' => '–º–∞—è',
                    '06' => '–∏—é–Ω—è',
                    '07' => '–∏—é–ª—è',
                    '08' => '–∞–≤–≥—É—Å—Ç–∞',
                    '09' => '—Å–µ–Ω—Ç—è–±—Ä—è',
                    '10' => '–æ–∫—Ç—è–±—Ä—è',
                    '11' => '–Ω–æ—è–±—Ä—è',
                    '12' => '–¥–µ–∫–∞–±—Ä—è',
                ];

                $date = explode('-', $item->date);
                $date = $date[2] . ' ' . $months[$date[1]];

                // –≤—ã–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if ($i == 0) {
                    $compilation_string = "üóì $date\r\n";
                }

                // –≤—ã–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö
                if ($i > 0) {
                    if ($item->date != $timetable[$i - 1]->date) {
                        $compilation_string .= "\r\nüóì $date \r\n";
                    }
                }

                // –≤—ã–≤–æ–¥ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                $time = mb_strcut($item->time, 0, 5);
                $compilation_string .= "$time $item->name\r\n";

                $i++;
            }


            // –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Ñ–∞–π–ª–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º
            $compiled = Storage::disk('local')->put('/telegram/messages/squirrel/event.php', $compilation_string);
            //* End Compiled.

            // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            $r->session()->flash('message', "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"$event->name\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.");

            return redirect()->route('admin.events.index');
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     * –í—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
     * –í—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id = 'unrequired')
    {
        // –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if (url()->current() == route('admin.event.show', ['id' => $id])) {

            // –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            $event = Event::find($id);

            // –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            $timetable = Timetable::where('entity_id', $id)->where('type', 'event')->orderBy('day_number')->orderBy('time')->get();

            return view('admin.pages.event_show', ['id' => $id, 'event' => $event, 'timetable' => $timetable]);
        }

        // –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if (url()->current() == route('admin.timetable.events.show')) {

            //* Compiled.
            // –≤ —Å–∫–æ–º–ø–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            $timetable = DB::table('timetables')
                ->join('events', 'timetables.entity_id', 'events.id')
                ->where('type', 'event')
                ->where('timetables.date', '>=', date('Y-m-d'))
                ->select('timetables.date', 'timetables.time', 'events.name')
                ->orderBy('date')
                ->orderBy('time')
                ->get();

            // –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
            $compilation_string = '–ü–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç';
            $i = 0;

            foreach ($timetable as $item) {

                $months = [
                    '01' => '—è–Ω–≤–∞—Ä—è',
                    '02' => '—Ñ–µ–≤—Ä–∞–ª—è',
                    '03' => '–º–∞—Ä—Ç–∞',
                    '04' => '–∞–ø—Ä–µ–ª—è',
                    '05' => '–º–∞—è',
                    '06' => '–∏—é–Ω—è',
                    '07' => '–∏—é–ª—è',
                    '08' => '–∞–≤–≥—É—Å—Ç–∞',
                    '09' => '—Å–µ–Ω—Ç—è–±—Ä—è',
                    '10' => '–æ–∫—Ç—è–±—Ä—è',
                    '11' => '–Ω–æ—è–±—Ä—è',
                    '12' => '–¥–µ–∫–∞–±—Ä—è',
                ];

                $date = explode('-', $item->date);
                $date = $date[2] . ' ' . $months[$date[1]];

                // –≤—ã–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if ($i == 0) {
                    $compilation_string = "üóì $date\r\n";
                }

                // –≤—ã–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö
                if ($i > 0) {
                    if ($item->date != $timetable[$i - 1]->date) {
                        $compilation_string .= "\r\nüóì $date \r\n";
                    }
                }

                // –≤—ã–≤–æ–¥ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                $time = mb_strcut($item->time, 0, 5);

                if ($time) {
                    $compilation_string .= "$time $item->name\r\n";
                } else {
                    $compilation_string .= "$item->name\r\n";
                }

                $i++;
            }



            // –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Ñ–∞–π–ª–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º
            $compiled = Storage::disk('local')->put('/telegram/messages/squirrel/event.php', $compilation_string);
            //* End Compiled.

            return view('admin.pages.events_timetable', ['compilation_string' => $compilation_string]);
        }
    }

    /**
     * Show the form for editing the specified resource.
     * –í—ã–≤–æ–¥ —Ñ–æ—Ä–º—ã.
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit(Request $r, $id)
    {
        // –µ—Å–ª–∏ get, —Ç–æ –≤—ã–≤–æ–¥ —Ñ–æ—Ä–º—ã
        if ($r->isMethod('GET')) {

            // –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            $event = Event::find($id);

            // –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            $timetable = Timetable::where('entity_id', $id)->where('type', 'event')->orderBy('day_number')->orderBy('time')->get();

            return view('admin.pages.event_form', ['id' => $id, 'event' => $event, 'timetable' => $timetable]);
        }

        // –µ—Å–ª–∏ post, —Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if ($r->isMethod('POST')) {

            // –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            $event = Event::find($id);

            // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            $event->update($r->all());

            // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
            if (!$r->status) {
                $event->update(['status' => 0]);
            }

            // –æ—á–∏—Å—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª—è–µ–º–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π
            $timetable = Timetable::where('entity_id', $id)->delete();

            // –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if ($r->date && $r->time) {

                foreach ($r->date as $k => $v) {

                    $date = $v;
                    $time = $r->time[$k];
                    $entity_id = $event->id;
                    $type = 'event';

                    // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    $timetable = Timetable::create(['date' => $date, 'time' => $time, 'entity_id' => $entity_id, 'type' => $type]);
                }
            }

            //* Compiled.
            $timetable = DB::table('timetables')
                ->join('events', 'timetables.entity_id', 'events.id')
                ->where('type', 'event')
                ->where('timetables.date', '>=', date('Y-m-d'))
                ->select('timetables.date', 'timetables.time', 'events.name')
                ->orderBy('date')
                ->orderBy('time')
                ->get();



            // –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
            $compilation_string = '–ü–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç';
            $i = 0;

            foreach ($timetable as $item) {

                $months = [
                    '01' => '—è–Ω–≤–∞—Ä—è',
                    '02' => '—Ñ–µ–≤—Ä–∞–ª—è',
                    '03' => '–º–∞—Ä—Ç–∞',
                    '04' => '–∞–ø—Ä–µ–ª—è',
                    '05' => '–º–∞—è',
                    '06' => '–∏—é–Ω—è',
                    '07' => '–∏—é–ª—è',
                    '08' => '–∞–≤–≥—É—Å—Ç–∞',
                    '09' => '—Å–µ–Ω—Ç—è–±—Ä—è',
                    '10' => '–æ–∫—Ç—è–±—Ä—è',
                    '11' => '–Ω–æ—è–±—Ä—è',
                    '12' => '–¥–µ–∫–∞–±—Ä—è',
                ];

                $date = explode('-', $item->date);
                $date = $date[2] . ' ' . $months[$date[1]];

                // –≤—ã–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if ($i == 0) {
                    $compilation_string = "üóì $date\r\n";
                }

                // –≤—ã–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö
                if ($i > 0) {
                    if ($item->date != $timetable[$i - 1]->date) {
                        $compilation_string .= "\r\nüóì $date \r\n";
                    }
                }

                // –≤—ã–≤–æ–¥ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                $time = mb_strcut($item->time, 0, 5);

                if ($time) {
                    $compilation_string .= "$time $item->name\r\n";
                } else {
                    $compilation_string .= "$item->name\r\n";
                }

                $i++;
            }




            // –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Ñ–∞–π–ª–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º
            $compiled = Storage::disk('local')->put('/telegram/messages/squirrel/event.php', $compilation_string);
            //* End Compiled.

            // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            $r->session()->flash('message', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.');

            return redirect()->route('admin.event.show', ['id' => $event->id]);
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     * –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $r, $id)
    {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        $event = Event::find($id);
        // –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        $event_name = $event->name;
        // —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        $event->delete();
        // —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        $timetable = Timetable::where('entity_id', $id)->where('type', 'event')->delete();

        //* Compiled.
        $timetable = DB::table('timetables')
        ->join('events', 'timetables.entity_id', 'events.id')
        ->where('type', 'event')
        ->where('timetables.date', '>=', date('Y-m-d'))
        ->select('timetables.date', 'timetables.time', 'events.name')
        ->orderBy('date')
        ->orderBy('time')
        ->get();



    // –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    $compilation_string = '–ü–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç';
    $i = 0;

    foreach ($timetable as $item) {

        $months = [
            '01' => '—è–Ω–≤–∞—Ä—è',
            '02' => '—Ñ–µ–≤—Ä–∞–ª—è',
            '03' => '–º–∞—Ä—Ç–∞',
            '04' => '–∞–ø—Ä–µ–ª—è',
            '05' => '–º–∞—è',
            '06' => '–∏—é–Ω—è',
            '07' => '–∏—é–ª—è',
            '08' => '–∞–≤–≥—É—Å—Ç–∞',
            '09' => '—Å–µ–Ω—Ç—è–±—Ä—è',
            '10' => '–æ–∫—Ç—è–±—Ä—è',
            '11' => '–Ω–æ—è–±—Ä—è',
            '12' => '–¥–µ–∫–∞–±—Ä—è',
        ];

        $date = explode('-', $item->date);
        $date = $date[2] . ' ' . $months[$date[1]];

        // –≤—ã–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        if ($i == 0) {
            $compilation_string = "üóì $date\r\n";
        }

        // –≤—ã–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö
        if ($i > 0) {
            if ($item->date != $timetable[$i - 1]->date) {
                $compilation_string .= "\r\nüóì $date \r\n";
            }
        }

        // –≤—ã–≤–æ–¥ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        $time = mb_strcut($item->time, 0, 5);
        $compilation_string .= "$time $item->name\r\n";

        $i++;
    }


    // –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Ñ–∞–π–ª–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º
    $compiled = Storage::disk('local')->put('/telegram/messages/squirrel/event.php', $compilation_string);
    //* End Compiled.

        // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        $r->session()->flash('message', "–ü—Ä–æ–≥—Ä–∞–º–º–∞ \"$event_name\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.");

        return redirect()->route('admin.events.index');
    }
}
